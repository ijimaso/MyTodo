{"version":3,"sources":["Count.js","InputForm.js","Todo.js","Todolist.js","App.js","index.js"],"names":["Count","react_default","a","createElement","className","id","Badge_default","variant","this","props","doneTodo","undoneTodo","Component","InputForm","Container_default","Row_default","Col_default","md","Form_default","onSubmit","makeTodo","Group","controlId","Label","Control","type","placeholder","name","as","rows","Button_default","Modal_default","show","onHide","modalClose","Header","closeButton","Title","Body","concat","modalMessage","Footer","onClick","Todo","doneClassName","done","buttonClassName","Card_default","style","width","title","Text","content","event","preventDefault","switchStatus","deleteTodo","Todolist","lineNumber","_this","todos","filter","todo","map","onelineTodo","src_Todo","Object","assign","key","numbers","i","push","arrangeTodos","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todosLength","length","state","countTodo","setState","target","value","slice","modalShow","clickTodo","selectedIndex","findIndex","setTodo","leftTodos","deletedTodo","Count_Count","InputForm_InputForm","bind","Todolist_Todolist","rootElement","document","getElementById","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.3d9c4795.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/Count.css\";\r\n\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nexport default class Count extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"count\">\r\n                <div className=\"eachbadge\">\r\n                    <h1 id=\"done\">\r\n                        <Badge variant=\"info\">Done:{this.props.doneTodo}</Badge>\r\n                    </h1>\r\n                </div>\r\n                <div className=\"eachbadge\">\r\n                    <h1>\r\n                        <Badge variant=\"warning\">Undone:{this.props.undoneTodo}</Badge>\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./css/InputForm.css\";\r\n\r\n// react-bootstrapからButton,Form,Container,Row,Colコンポーネントをインポート\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n/**\r\n * InputFormコンポーネント\r\n *\r\n * @export\r\n * @class InputForm\r\n * @extends {Component}\r\n */\r\nexport default class InputForm extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"InputForm\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col />\r\n                        <Col md={6}>\r\n                            <Form onSubmit={this.props.makeTodo}>\r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label id=\"formTitle\">Title</Form.Label>\r\n                                    <Form.Control type=\"title\" placeholder=\"Title\" name=\"title\" />\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                    <Form.Label>Content</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" name=\"content\" />\r\n                                </Form.Group>\r\n                                <Button variant=\"success\" type=\"create\" id=\"createButton\">\r\n                                    Create\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                </Container>\r\n                <Modal show={this.props.show} onHide={this.props.modalClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Error</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>{`Please enter a new Todo's ${this.props.modalMessage}!!`}</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={this.props.modalClose}>\r\n                            OK!\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport \"./css/Todo.css\";\r\n\r\n//react-bootstrapからCard,Buttonコンポーネントをインポート\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n/**\r\n * Todoコンポーネント\r\n * Fuctional Component\r\n * props(親から渡された変数)を受け取って表示\r\n * fuctional componentはpropsを指定するとき，thisがいらない\r\n * react-bootstrapのCardコンポーネントで装飾\r\n *\r\n * @param {*} props\r\n * @returns\r\n */\r\nconst Todo = props => {\r\n    const doneClassName = props.done ? \"done\" : \"undone\";\r\n    const done = props.done ? \"Undone\" : \"Done\";\r\n    const buttonClassName = props.done ? \"warning\" : \"info\";\r\n\r\n    return (\r\n        <div className={doneClassName}>\r\n            <Card style={{ width: \"250px\" }}>\r\n                <Card.Body>\r\n                    <Card.Title className={doneClassName}>{props.title}</Card.Title>\r\n                    <Card.Text className={doneClassName}>{props.content}</Card.Text>\r\n                    <Button variant={buttonClassName} onClick={(event) => {\r\n                        event.preventDefault();\r\n                        props.switchStatus(props);\r\n                    }} id=\"doneButton\">{done}</Button>\r\n                    <Button variant=\"danger\" onClick={(event) => {\r\n                        event.preventDefault();\r\n                        props.deleteTodo(props);\r\n                    }}>Delete</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\n//Todoコンポーネントをデフォルトのコンポーネントとして，エクスポート\r\nexport default Todo;","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport \"./css/Todolist.css\";\r\n\r\n\r\n/**\r\n * Todolistコンポーネント\r\n * \r\n * @export\r\n * @class Todolist\r\n * @extends {Component}\r\n */\r\nexport default class Todolist extends Component {\r\n\r\n    /**\r\n     * 一行に3個のTodoを並べるメソッド\r\n     *\r\n     * @param {*} lineNumber 行数\r\n     * @returns {list}\r\n     * @memberof Todolist\r\n     */\r\n    arrangeTodos(lineNumber) {\r\n        // filterメソッドで3列になるようにTodosを取り出す\r\n        const onelineTodos = this.props.todos.filter(todo => {\r\n            return (\r\n                todo.id >= 3 * lineNumber - 2 && todo.id <= lineNumber * 3\r\n            );\r\n        });\r\n\r\n        //取り出したTodos(配列)を使って，それぞれのTodoに対して，Todoコンポーネントを呼び出す\r\n        //{...eactTodo}で下の階層にプロパティをまとめて渡す\r\n        const eachTodos = onelineTodos.map(onelineTodo => {\r\n            return <Todo key={onelineTodo.id} {...onelineTodo} switchStatus={this.props.switchStatus} deleteTodo={this.props.deleteTodo} />;\r\n        });\r\n\r\n        return eachTodos;\r\n    }\r\n\r\n    render() {\r\n        const numbers = [];\r\n        const lineNumber = 100;\r\n        for (let i = 1; i <= lineNumber; i++) {\r\n            numbers.push(<li key={i}>{this.arrangeTodos(i)}</li>)\r\n        }\r\n\r\n        return (\r\n            <div className=\"Todolist\">\r\n                <ul>{numbers}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport Count from \"./Count\";\nimport InputForm from \"./InputForm\";\nimport Todolist from \"./Todolist\";\nimport \"./css/App.css\";\n\n\n/**\n * Appコンポーネント\n * Todoコンポーネントをデフォルトのコンポーネントとして，エクスポート\n *\n * @export\n * @class App\n * @extends {Component}\n */\nexport default class App extends Component {\n\n  //データを設定\n  constructor() {\n    super();\n    const todos = [];\n    const todosLength = todos.length;\n    const modalMessage = \"\";\n\n    //状態(state)を保存\n    this.state = {\n      todos: todos,\n      doneTodo: todosLength,\n      undoneTodo: todosLength,\n      modalMessage: modalMessage,\n      show: false,\n      countTodo: todosLength\n    };\n  }\n\n  //modalを表示/非表示する関数\n  modalShow() {\n    this.setState({ show: true });\n  }\n\n  modalClose() {\n    this.setState({ show: false });\n  }\n\n  /**\n   * フォームに入力された新しいTodoを作成するメソッド\n   *\n   * @param {*} event\n   * @memberof App\n   */\n  makeTodo(event) {\n    event.preventDefault();\n\n    // event.target.(name属性).valueでフォームの中身を取り出す\n    const title = event.target.title.value;\n    const content = event.target.content.value;\n\n    // constructorから値を取り出し\n    const todos = this.state.todos.slice(); //全部の要素を新しい配列としてコピー\n    let undoneTodo = this.state.undoneTodo;\n    let modalMessage = this.state.modalMessage;\n    let countTodo = this.state.countTodo;\n\n    // titleとcontentの両方の記入が必要\n    if (title !== \"\" && content !== \"\") {\n      countTodo += 1;\n      undoneTodo += 1;\n\n      // 作成したTodoを配列todosに追加\n      todos.push({\n        id: countTodo,\n        title: title,\n        content: content,\n        done: false\n      });\n\n      //値を更新\n      this.setState({ countTodo: countTodo });\n      this.setState({ undoneTodo: undoneTodo });\n    } else if (title === \"\" && content !== \"\") {\n      modalMessage = \"title\";\n      this.modalShow();\n    } else if (title !== \"\" && content === \"\") {\n      modalMessage = \"content\";\n      this.modalShow();\n    } else {\n      modalMessage = \"both of title and content\";\n      this.modalShow();\n    }\n\n    // setStateでstateの更新を行う\n    this.setState({ todos: todos });\n    this.setState({ modalMessage: modalMessage });\n\n    // フォームの中身を空に再設定\n    event.target.title.value = \"\";\n    event.target.content.value = \"\";\n  }\n\n  /**\n   * 完了/未完了ボタンを押すと切り替わるメソッド\n   *\n   * @param {*} clickTodo\n   * @memberof App\n   */\n  switchStatus(clickTodo) {\n    const todos = this.state.todos.slice();\n    let doneTodo = this.state.doneTodo;\n    let undoneTodo = this.state.undoneTodo;\n\n    // クリックしたTodoのインデックスを取得\n    const selectedIndex = todos.findIndex(todo => {\n      return todo.id === clickTodo.id;\n    })\n\n    const setTodo = todos[selectedIndex];\n\n    // 真偽値を反転\n    setTodo.done = !setTodo.done;\n\n    // 完了/未完了によって，個数をカウント\n    if (setTodo.done === true) {\n      doneTodo += 1;\n      undoneTodo -= 1;\n    }\n\n    if (setTodo.done === false) {\n      undoneTodo += 1;\n      doneTodo -= 1;\n    }\n\n    // 値を更新\n    this.setState({ todos: todos });\n    this.setState({ doneTodo: doneTodo });\n    this.setState({ undoneTodo: undoneTodo });\n  }\n\n\n  /**\n   * 削除ボタンを押すとTodoを削除するメソッド\n   *\n   * @param {*} clickTodo\n   * @memberof App\n   */\n  deleteTodo(clickTodo) {\n    const todos = this.state.todos.slice();\n    let doneTodo = this.state.doneTodo;\n    let undoneTodo = this.state.undoneTodo;\n\n    const leftTodos = todos.filter(todo => {\n      return todo.id !== clickTodo.id;\n    });\n\n    const deletedTodo = todos.filter(todo => {\n      return todo.id === clickTodo.id;\n    })\n\n    if (deletedTodo[0].done === true) {\n      doneTodo -= 1;\n    }\n\n    if (deletedTodo[0].done === false) {\n      undoneTodo -= 1;\n    }\n\n    this.setState({ todos: leftTodos });\n    this.setState({ doneTodo: doneTodo });\n    this.setState({ undoneTodo: undoneTodo });\n  }\n\n  // レンダリング\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id=\"title\">MyTodo</h1>\n        <Count doneTodo={this.state.doneTodo} undoneTodo={this.state.undoneTodo} />\n        <InputForm show={this.state.show} modalMessage={this.state.modalMessage} modalShow={this.modalShow.bind(this)} modalClose={this.modalClose.bind(this)} makeTodo={this.makeTodo.bind(this)} />\n        <Todolist todos={this.state.todos} switchStatus={this.switchStatus.bind(this)} deleteTodo={this.deleteTodo.bind(this)} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\n//index.htmlのroot要素にレンダリングしたDOMを挿入\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}