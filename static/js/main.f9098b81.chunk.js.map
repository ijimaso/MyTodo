{"version":3,"sources":["Count.js","InputForm.js","Todo.js","Todolist.js","App.js","index.js"],"names":["Count","react_default","a","createElement","className","id","Badge_default","variant","this","props","doneTodo","undoneTodo","Component","InputForm","Container_default","Row_default","Col_default","md","Form_default","onSubmit","makeTodo","Group","controlId","Label","Control","type","placeholder","name","as","rows","Button_default","Modal_default","show","Header","closeButton","Title","Body","concat","modalMessage","Footer","onClick","modalClose","Todo","doneClassName","done","buttonClassName","Card_default","style","width","title","Text","content","event","preventDefault","switchStatus","deleteTodo","Todolist","lineNumber","_this","todos","filter","todo","map","onelineTodo","src_Todo","Object","assign","key","arrangeTodos","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todosLength","length","state","countTodo","setState","target","value","slice","push","modalShow","clickTodo","selectedIndex","findIndex","setTodo","leftTodos","deletedTodo","Count_Count","InputForm_InputForm","bind","Todolist_Todolist","rootElement","document","getElementById","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.f9098b81.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/Count.css\";\r\n\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nexport default class Count extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"count\">\r\n                <div className=\"eachbadge\">\r\n                    <h1 id=\"done\">\r\n                        <Badge variant=\"info\">Done:{this.props.doneTodo}</Badge>\r\n                    </h1>\r\n                </div>\r\n                <div className=\"eachbadge\">\r\n                    <h1>\r\n                        <Badge variant=\"warning\">Undone:{this.props.undoneTodo}</Badge>\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./css/InputForm.css\";\r\n\r\n// react-bootstrapからButton,Form,Container,Row,Colコンポーネントをインポート\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n/**\r\n * InputFormコンポーネント\r\n *\r\n * @export\r\n * @class InputForm\r\n * @extends {Component}\r\n */\r\nexport default class InputForm extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"InputForm\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col />\r\n                        <Col md={6}>\r\n                            <Form onSubmit={this.props.makeTodo}>\r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label id=\"formTitle\">Title</Form.Label>\r\n                                    <Form.Control type=\"title\" placeholder=\"Title\" name=\"title\" />\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                    <Form.Label>Content</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" name=\"content\" />\r\n                                </Form.Group>\r\n                                <Button variant=\"success\" type=\"create\" id=\"createButton\">\r\n                                    Create\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                </Container>\r\n                <Modal show={this.props.show}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Error</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>{`Please enter a new Todo's ${this.props.modalMessage}!!`}</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={this.props.modalClose}>\r\n                            OK!\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport \"./css/Todo.css\";\r\n\r\n//react-bootstrapからCard,Buttonコンポーネントをインポート\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n/**\r\n * Todoコンポーネント\r\n * Fuctional Component\r\n * props(親から渡された変数)を受け取って表示\r\n * fuctional componentはpropsを指定するとき，thisがいらない\r\n * react-bootstrapのCardコンポーネントで装飾\r\n *\r\n * @param {*} props\r\n * @returns\r\n */\r\nconst Todo = props => {\r\n    const doneClassName = props.done ? \"done\" : \"undone\";\r\n    const done = props.done ? \"Undone\" : \"Done\";\r\n    const buttonClassName = props.done ? \"warning\" : \"info\";\r\n\r\n    return (\r\n        <div className={doneClassName}>\r\n            <Card style={{ width: \"250px\" }}>\r\n                <Card.Body>\r\n                    <Card.Title className={doneClassName}>{props.title}</Card.Title>\r\n                    <Card.Text className={doneClassName}>{props.content}</Card.Text>\r\n                    <Button variant={buttonClassName} onClick={(event) => {\r\n                        event.preventDefault();\r\n                        props.switchStatus(props);\r\n                    }} id=\"doneButton\">{done}</Button>\r\n                    <Button variant=\"danger\" onClick={(event) => {\r\n                        event.preventDefault();\r\n                        props.deleteTodo(props);\r\n                    }}>Delete</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\n//Todoコンポーネントをデフォルトのコンポーネントとして，エクスポート\r\nexport default Todo;","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport \"./css/Todolist.css\";\r\n\r\n\r\n/**\r\n * Todolistコンポーネント\r\n * \r\n * @export\r\n * @class Todolist\r\n * @extends {Component}\r\n */\r\nexport default class Todolist extends Component {\r\n\r\n    /**\r\n     * 一行に3個のTodoを並べるメソッド\r\n     *\r\n     * @param {*} lineNumber 行数\r\n     * @returns {list}\r\n     * @memberof Todolist\r\n     */\r\n    arrangeTodos(lineNumber) {\r\n\r\n        // filterメソッドで3列になるようにTodosを取り出す\r\n        const onelineTodos = this.props.todos.filter(todo => {\r\n            return (\r\n                todo.id >= 3 * lineNumber - 2 && todo.id <= lineNumber * 3\r\n            );\r\n        });\r\n\r\n        //取り出したTodos(配列)を使って，それぞれのTodoに対して，Todoコンポーネントを呼び出す\r\n        //{...eactTodo}で下の階層にプロパティをまとめて渡す\r\n        const eachTodos = onelineTodos.map(onelineTodo => {\r\n            return <Todo key={onelineTodo.id} {...onelineTodo} switchStatus={this.props.switchStatus} deleteTodo={this.props.deleteTodo} />;\r\n        });\r\n\r\n        return eachTodos;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Todolist\">\r\n                <ul>{this.arrangeTodos(1)}</ul>\r\n                <ul>{this.arrangeTodos(2)}</ul>\r\n                <ul>{this.arrangeTodos(3)}</ul>\r\n                <ul>{this.arrangeTodos(4)}</ul>\r\n                <ul>{this.arrangeTodos(5)}</ul>\r\n                <ul>{this.arrangeTodos(6)}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport Count from \"./Count\";\nimport InputForm from \"./InputForm\";\nimport Todolist from \"./Todolist\";\nimport \"./css/App.css\";\n\n\n/**\n * Appコンポーネント\n * Todoコンポーネントをデフォルトのコンポーネントとして，エクスポート\n *\n * @export\n * @class App\n * @extends {Component}\n */\nexport default class App extends Component {\n\n  //データを設定\n  constructor() {\n    super();\n    const todos = [];\n    const todosLength = todos.length;\n    const modalMessage = \"\";\n\n    //状態(state)を保存\n    this.state = {\n      todos: todos,\n      doneTodo: todosLength,\n      undoneTodo: todosLength,\n      modalMessage: modalMessage,\n      show: false,\n      countTodo: todosLength + 1\n    };\n  }\n\n  modalClose() {\n    this.setState({ show: false });\n  }\n\n  modalShow() {\n    this.setState({ show: true });\n  }\n\n  /**\n   * フォームに入力された新しいTodoを作成するメソッド\n   *\n   * @param {*} event\n   * @memberof App\n   */\n  makeTodo(event) {\n    event.preventDefault();\n\n    // event.target.(name属性).valueでフォームの中身を取り出す\n    const title = event.target.title.value;\n    const content = event.target.content.value;\n\n    // constructorから値を取り出し\n    const todos = this.state.todos.slice(); //全部の要素を新しい配列としてコピー\n    let undoneTodo = this.state.undoneTodo;\n    let modalMessage = this.state.modalMessage;\n    const countTodo = this.state.countTodo;\n\n    // titleとcontentの両方の記入が必要\n    if (title !== \"\" && content !== \"\") {\n      // 作成したTodoを配列todosに追加\n      todos.push({\n        id: countTodo,\n        title: title,\n        content: content,\n        done: false\n      });\n      undoneTodo += 1;\n    } else if (title === \"\" && content !== \"\") {\n      modalMessage = \"title\";\n      this.modalShow();\n    } else if (title !== \"\" && content === \"\") {\n      modalMessage = \"content\";\n      this.modalShow();\n    } else {\n      modalMessage = \"both of title and content\";\n      this.modalShow();\n    }\n\n\n    // setStateでstateの更新を行う\n    this.setState({ todos });\n    this.setState({ undoneTodo: undoneTodo });\n    this.setState({ modalMessage: modalMessage });\n    this.setState({ countTodo: countTodo + 1 });\n\n    // フォームの中身を空に再設定\n    event.target.title.value = \"\";\n    event.target.content.value = \"\";\n  }\n\n  /**\n   * 完了/未完了ボタンを押すと切り替わるメソッド\n   *\n   * @param {*} clickTodo\n   * @memberof App\n   */\n  switchStatus(clickTodo) {\n    const todos = this.state.todos.slice();\n    let doneTodo = this.state.doneTodo;\n    let undoneTodo = this.state.undoneTodo;\n\n    // クリックしたTodoのインデックスを取得\n    const selectedIndex = todos.findIndex(todo => {\n      return todo.id === clickTodo.id;\n    })\n\n    const setTodo = todos[selectedIndex];\n\n    // 真偽値を反転\n    setTodo.done = !setTodo.done;\n\n    // 完了/未完了によって，個数をカウント\n    if (setTodo.done === true) {\n      doneTodo += 1;\n      undoneTodo -= 1;\n    }\n\n    if (setTodo.done === false) {\n      undoneTodo += 1;\n      doneTodo -= 1;\n    }\n\n    // 値を更新\n    this.setState({ todos: todos });\n    this.setState({ doneTodo: doneTodo });\n    this.setState({ undoneTodo: undoneTodo });\n  }\n\n\n  /**\n   * 削除ボタンを押すとTodoを削除するメソッド\n   *\n   * @param {*} clickTodo\n   * @memberof App\n   */\n  deleteTodo(clickTodo) {\n    const todos = this.state.todos.slice();\n    let doneTodo = this.state.doneTodo;\n    let undoneTodo = this.state.undoneTodo;\n\n    const leftTodos = todos.filter(todo => {\n      return todo.id !== clickTodo.id;\n    });\n\n    const deletedTodo = todos.filter(todo => {\n      return todo.id === clickTodo.id;\n    })\n\n    if (deletedTodo[0].done === true) {\n      doneTodo -= 1;\n    }\n\n    if (deletedTodo[0].done === false) {\n      undoneTodo -= 1;\n    }\n\n    this.setState({ todos: leftTodos });\n    this.setState({ doneTodo: doneTodo });\n    this.setState({ undoneTodo: undoneTodo });\n  }\n\n  // レンダリング\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id=\"title\">MyTodo</h1>\n        <Count doneTodo={this.state.doneTodo} undoneTodo={this.state.undoneTodo} />\n        <InputForm show={this.state.show} modalMessage={this.state.modalMessage} modalClose={this.modalClose.bind(this)} modalShow={this.modalShow.bind(this)} makeTodo={this.makeTodo.bind(this)} />\n        <Todolist todos={this.state.todos} switchStatus={this.switchStatus.bind(this)} deleteTodo={this.deleteTodo.bind(this)} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\n//index.htmlのroot要素にレンダリングしたDOMを挿入\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}